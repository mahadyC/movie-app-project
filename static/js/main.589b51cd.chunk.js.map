{"version":3,"sources":["api.ts","components/movie-detail.tsx","components/home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["api","API_KEY","process","REACT_APP_TMDB_API_KEY","MovieDetail","state","movieId","_this2","this","props","match","params","fetch","concat","then","res","json","data","movie","setState","selected_movie","react_default","a","createElement","className","title","vote_average","genres","map","genre","key","id","name","Date","release_date","getFullYear","overview","style","backgroundImage","poster_path","Component","Home","popular_movies","results","movieList","Link","to","src","alt","App","BrowserRouter","basename","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.589b51cd.chunk.js","sourcesContent":["\nconst api: string = 'https://api.themoviedb.org/3/movie';\nconst API_KEY: string = process.env.REACT_APP_TMDB_API_KEY!;\n\nexport const getPopularMovies = () =>\n  fetch(`${api}/popular?api_key=${API_KEY}&page=1`)\n    .then(res => res.json())\n    .then(data => data.results)\n\nexport const getMovieDetail = (movieId: string) =>\n  fetch(`${api}/${movieId}?api_key=${API_KEY}`)\n    .then(res => res.json())\n    .then(data => data)","import React, { Component } from \"react\";\nimport './movie-detail.css';\nimport * as api from '../api';\nimport { RouteComponentProps } from \"react-router\";\n\ntype Genres = {\n    id: number;\n    name: string;\n}\ntype Movie = {\n    id: string;\n    title: string;\n    release_date: string;\n    poster_path: string;\n    vote_average: number;\n    overview: string;\n    genres: Genres[];\n}\n\ntype State = {\n    selected_movie?: Movie;\n}\ntype Props = RouteComponentProps<{movieId: string}>;\n\nclass MovieDetail extends Component<Props> {\n\n    state: State = { \n    }\n\n    componentDidMount() {\n        api.getMovieDetail(this.props.match.params.movieId).then((movie) => {\n          this.setState({selected_movie: movie})\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"movie-detail-container\">\n                {\n                    (this.state.selected_movie)\n                        ?   <div className=\"movie-detail\">\n                                <h1>{this.state.selected_movie.title}</h1>\n                                <div className=\"inlining\">\n                                    <div className=\"rating\">{this.state.selected_movie.vote_average}/<span>10</span></div>\n                                    <div className=\"genres\">{this.state.selected_movie.genres.map((genre) => <div key={genre.id} className=\"genre\">{genre.name}</div>)}</div>\n                                    <div className=\"release-date\">{new Date(this.state.selected_movie.release_date).getFullYear()}</div>\n                                </div>                    \n                                <div className=\"overview\">{this.state.selected_movie.overview}</div>\n                                <div className=\"images\">\n                                    <div className=\"image\" style={{ backgroundImage: `url(https://image.tmdb.org/t/p/w154/${this.state.selected_movie.poster_path})`}}></div>\n                                    <div className=\"image\"style={{ backgroundImage: `url(https://image.tmdb.org/t/p/w154/${this.state.selected_movie.poster_path})`}}></div>\n                                    <div className=\"image\" style={{ backgroundImage: `url(https://image.tmdb.org/t/p/w154/${this.state.selected_movie.poster_path})`}}></div>\n                                </div>\n                                \n                            </div>\n                        :   <div>Movie detail not available</div>\n                }\n                \n            </div>\n            \n        )\n    }\n}\n\nexport default MovieDetail;","import React, { Component } from 'react';\nimport * as api from '../api';\nimport './Home.css';\nimport { Link } from 'react-router-dom';\n\ntype Movie = {\n    id: string;\n    title: string;\n    release_date: string;\n    poster_path: string;\n    vote_average: number;\n    overview: string;\n}\n\ntype State = {\n    popular_movies: Movie[];\n}\n\nclass Home extends Component {\n    state: State = {\n        popular_movies: []    \n    }\n\n    componentDidMount() {\n        api.getPopularMovies().then((movieList) => {\n          this.setState({popular_movies: movieList})\n        })\n    }\n\n    render() {\n        return(\n            <div className='page-container'>\n                <h1>Popular Movies</h1>\n                <hr></hr>\n                <div className='grid-container'>\n                    {this.state.popular_movies.map((movie) =>          \n                        <div key={movie.id} className='grid-item'>\n                            <div className='image-card'>\n                                <Link to={`/${movie.id}`}>            \n                                <img className='movie-card-top' src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt='Poster of the movie'/>  \n                                </Link>   \n                                <div className='rating'>{movie.vote_average}</div>                                \n                            </div>\n                            <div className='movie-release-date'>{new Date(movie.release_date).getFullYear()}</div>\n                            <div className='movie-title'>{movie.title}</div>             \n                        </div> \n                    )}\n                </div>\n            </div>\n            \n        )\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, BrowserRouter} from 'react-router-dom';\nimport MovieDetail from './components/movie-detail';\nimport Home from './components/home';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">  \n          <Route exact path=\"/\" component={Home}></Route>\n          <Route path=\"/:movieId\" component={MovieDetail}></Route>     \n        </div>\n      </Router>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}